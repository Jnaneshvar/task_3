{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3322096,"sourceType":"datasetVersion","datasetId":2008274}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-01T14:11:51.187373Z","iopub.execute_input":"2024-06-01T14:11:51.188244Z","iopub.status.idle":"2024-06-01T14:11:51.204388Z","shell.execute_reply.started":"2024-06-01T14:11:51.188184Z","shell.execute_reply":"2024-06-01T14:11:51.202648Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"/kaggle/input/bank-customer-churn-prediction/Churn_Modelling.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"pd.set_option('display.max_columns', None)\ndata = pd.read_csv('/kaggle/input/bank-customer-churn-prediction/Churn_Modelling.csv')\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:51.207177Z","iopub.execute_input":"2024-06-01T14:11:51.208380Z","iopub.status.idle":"2024-06-01T14:11:51.266174Z","shell.execute_reply.started":"2024-06-01T14:11:51.208323Z","shell.execute_reply":"2024-06-01T14:11:51.264307Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n0          1    15634602  Hargrave          619    France  Female   42   \n1          2    15647311      Hill          608     Spain  Female   41   \n2          3    15619304      Onio          502    France  Female   42   \n3          4    15701354      Boni          699    France  Female   39   \n4          5    15737888  Mitchell          850     Spain  Female   43   \n\n   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n0       2       0.00              1          1               1   \n1       1   83807.86              1          0               1   \n2       8  159660.80              3          1               0   \n3       1       0.00              2          0               0   \n4       2  125510.82              1          1               1   \n\n   EstimatedSalary  Exited  \n0        101348.88       1  \n1        112542.58       0  \n2        113931.57       1  \n3         93826.63       0  \n4         79084.10       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>Surname</th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>15634602</td>\n      <td>Hargrave</td>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>15647311</td>\n      <td>Hill</td>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>15619304</td>\n      <td>Onio</td>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>15701354</td>\n      <td>Boni</td>\n      <td>699</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>15737888</td>\n      <td>Mitchell</td>\n      <td>850</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:51.268121Z","iopub.execute_input":"2024-06-01T14:11:51.268534Z","iopub.status.idle":"2024-06-01T14:11:51.279156Z","shell.execute_reply.started":"2024-06-01T14:11:51.268501Z","shell.execute_reply":"2024-06-01T14:11:51.277579Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"(10000, 14)"},"metadata":{}}]},{"cell_type":"code","source":"data = data.drop_duplicates()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:51.281114Z","iopub.execute_input":"2024-06-01T14:11:51.281577Z","iopub.status.idle":"2024-06-01T14:11:51.307321Z","shell.execute_reply.started":"2024-06-01T14:11:51.281540Z","shell.execute_reply":"2024-06-01T14:11:51.304927Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:51.312566Z","iopub.execute_input":"2024-06-01T14:11:51.313187Z","iopub.status.idle":"2024-06-01T14:11:51.329625Z","shell.execute_reply.started":"2024-06-01T14:11:51.313136Z","shell.execute_reply":"2024-06-01T14:11:51.328040Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"RowNumber          0\nCustomerId         0\nSurname            0\nCreditScore        0\nGeography          0\nGender             0\nAge                0\nTenure             0\nBalance            0\nNumOfProducts      0\nHasCrCard          0\nIsActiveMember     0\nEstimatedSalary    0\nExited             0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"unique_entries = data.nunique()\nprint(unique_entries)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:51.331370Z","iopub.execute_input":"2024-06-01T14:11:51.331885Z","iopub.status.idle":"2024-06-01T14:11:51.352117Z","shell.execute_reply.started":"2024-06-01T14:11:51.331840Z","shell.execute_reply":"2024-06-01T14:11:51.350360Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"RowNumber          10000\nCustomerId         10000\nSurname             2932\nCreditScore          460\nGeography              3\nGender                 2\nAge                   70\nTenure                11\nBalance             6382\nNumOfProducts          4\nHasCrCard              2\nIsActiveMember         2\nEstimatedSalary     9999\nExited                 2\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"print(data.dtypes)\n# print(test.dtypes)\n# data.iloc[:, :-1] = data.iloc[:, :-1].astype('category')\n# test.iloc[:, :-1] = test.iloc[:, :-1].astype('category')\nprint ()\n\nfrom sklearn.preprocessing import LabelEncoder\n\n# Create a LabelEncoder object\nle = LabelEncoder()\n\n# Iterate over each column in the DataFrame, except the last one\nfor column in data.columns:\n    # Check if the column is of object type\n    if data[column].dtype == 'object':\n        # If yes, convert it to category\n        data[column] = le.fit_transform(data[column])\n#         test[column] = le.fit_transform(test[column])\n    if data[column].dtype == 'float64':\n        data[column] = data[column].astype(int)\n\nprint(data.dtypes)\n# print(test.dtypes)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:51.354156Z","iopub.execute_input":"2024-06-01T14:11:51.354549Z","iopub.status.idle":"2024-06-01T14:11:51.398288Z","shell.execute_reply.started":"2024-06-01T14:11:51.354516Z","shell.execute_reply":"2024-06-01T14:11:51.395829Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"RowNumber            int64\nCustomerId           int64\nSurname             object\nCreditScore          int64\nGeography           object\nGender              object\nAge                  int64\nTenure               int64\nBalance            float64\nNumOfProducts        int64\nHasCrCard            int64\nIsActiveMember       int64\nEstimatedSalary    float64\nExited               int64\ndtype: object\n\nRowNumber          int64\nCustomerId         int64\nSurname            int64\nCreditScore        int64\nGeography          int64\nGender             int64\nAge                int64\nTenure             int64\nBalance            int64\nNumOfProducts      int64\nHasCrCard          int64\nIsActiveMember     int64\nEstimatedSalary    int64\nExited             int64\ndtype: object\n","output_type":"stream"}]},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:51.400790Z","iopub.execute_input":"2024-06-01T14:11:51.401376Z","iopub.status.idle":"2024-06-01T14:11:51.419082Z","shell.execute_reply.started":"2024-06-01T14:11:51.401325Z","shell.execute_reply":"2024-06-01T14:11:51.417611Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 14 columns):\n #   Column           Non-Null Count  Dtype\n---  ------           --------------  -----\n 0   RowNumber        10000 non-null  int64\n 1   CustomerId       10000 non-null  int64\n 2   Surname          10000 non-null  int64\n 3   CreditScore      10000 non-null  int64\n 4   Geography        10000 non-null  int64\n 5   Gender           10000 non-null  int64\n 6   Age              10000 non-null  int64\n 7   Tenure           10000 non-null  int64\n 8   Balance          10000 non-null  int64\n 9   NumOfProducts    10000 non-null  int64\n 10  HasCrCard        10000 non-null  int64\n 11  IsActiveMember   10000 non-null  int64\n 12  EstimatedSalary  10000 non-null  int64\n 13  Exited           10000 non-null  int64\ndtypes: int64(14)\nmemory usage: 1.1 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"import seaborn as sns\nsns.set_context(\"paper\", font_scale=0.6)\nsns.heatmap(data.corr(), annot=True)\ndata.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:51.421918Z","iopub.execute_input":"2024-06-01T14:11:51.422366Z","iopub.status.idle":"2024-06-01T14:11:52.598232Z","shell.execute_reply.started":"2024-06-01T14:11:51.422328Z","shell.execute_reply":"2024-06-01T14:11:52.596827Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 14 columns):\n #   Column           Non-Null Count  Dtype\n---  ------           --------------  -----\n 0   RowNumber        10000 non-null  int64\n 1   CustomerId       10000 non-null  int64\n 2   Surname          10000 non-null  int64\n 3   CreditScore      10000 non-null  int64\n 4   Geography        10000 non-null  int64\n 5   Gender           10000 non-null  int64\n 6   Age              10000 non-null  int64\n 7   Tenure           10000 non-null  int64\n 8   Balance          10000 non-null  int64\n 9   NumOfProducts    10000 non-null  int64\n 10  HasCrCard        10000 non-null  int64\n 11  IsActiveMember   10000 non-null  int64\n 12  EstimatedSalary  10000 non-null  int64\n 13  Exited           10000 non-null  int64\ndtypes: int64(14)\nmemory usage: 1.1 MB\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"new_data = data.loc[:, data.nunique() <= 3000]\nnew_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.599997Z","iopub.execute_input":"2024-06-01T14:11:52.601532Z","iopub.status.idle":"2024-06-01T14:11:52.619317Z","shell.execute_reply.started":"2024-06-01T14:11:52.601474Z","shell.execute_reply":"2024-06-01T14:11:52.617789Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"(10000, 10)"},"metadata":{}}]},{"cell_type":"code","source":"new_data = new_data.drop_duplicates()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.621584Z","iopub.execute_input":"2024-06-01T14:11:52.622326Z","iopub.status.idle":"2024-06-01T14:11:52.633806Z","shell.execute_reply.started":"2024-06-01T14:11:52.622287Z","shell.execute_reply":"2024-06-01T14:11:52.632639Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"new_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.635290Z","iopub.execute_input":"2024-06-01T14:11:52.636571Z","iopub.status.idle":"2024-06-01T14:11:52.644773Z","shell.execute_reply.started":"2024-06-01T14:11:52.636527Z","shell.execute_reply":"2024-06-01T14:11:52.643434Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"(10000, 10)"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\ntrain_data, test_data = train_test_split(new_data, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.646047Z","iopub.execute_input":"2024-06-01T14:11:52.646886Z","iopub.status.idle":"2024-06-01T14:11:52.659422Z","shell.execute_reply.started":"2024-06-01T14:11:52.646852Z","shell.execute_reply":"2024-06-01T14:11:52.658178Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"X = train_data.drop('Exited', axis = 1)\ny=train_data['Exited']","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.665342Z","iopub.execute_input":"2024-06-01T14:11:52.666111Z","iopub.status.idle":"2024-06-01T14:11:52.674481Z","shell.execute_reply.started":"2024-06-01T14:11:52.666066Z","shell.execute_reply":"2024-06-01T14:11:52.673369Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"X_test = test_data.drop('Exited', axis = 1)\ny_test=test_data['Exited']","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.675928Z","iopub.execute_input":"2024-06-01T14:11:52.676525Z","iopub.status.idle":"2024-06-01T14:11:52.695204Z","shell.execute_reply.started":"2024-06-01T14:11:52.676490Z","shell.execute_reply":"2024-06-01T14:11:52.693342Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = X, X_test, y, y_test","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.696883Z","iopub.execute_input":"2024-06-01T14:11:52.697293Z","iopub.status.idle":"2024-06-01T14:11:52.707643Z","shell.execute_reply.started":"2024-06-01T14:11:52.697259Z","shell.execute_reply":"2024-06-01T14:11:52.706574Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"import numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.708958Z","iopub.execute_input":"2024-06-01T14:11:52.709837Z","iopub.status.idle":"2024-06-01T14:11:52.722025Z","shell.execute_reply.started":"2024-06-01T14:11:52.709796Z","shell.execute_reply":"2024-06-01T14:11:52.720414Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, BaggingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.723751Z","iopub.execute_input":"2024-06-01T14:11:52.724514Z","iopub.status.idle":"2024-06-01T14:11:52.737365Z","shell.execute_reply.started":"2024-06-01T14:11:52.724474Z","shell.execute_reply":"2024-06-01T14:11:52.736285Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"new_data.info()\nprint('*******')\nnew_data.head()\n# print(new_data.nunique())","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.739049Z","iopub.execute_input":"2024-06-01T14:11:52.739701Z","iopub.status.idle":"2024-06-01T14:11:52.769625Z","shell.execute_reply.started":"2024-06-01T14:11:52.739667Z","shell.execute_reply":"2024-06-01T14:11:52.768063Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 10 columns):\n #   Column          Non-Null Count  Dtype\n---  ------          --------------  -----\n 0   Surname         10000 non-null  int64\n 1   CreditScore     10000 non-null  int64\n 2   Geography       10000 non-null  int64\n 3   Gender          10000 non-null  int64\n 4   Age             10000 non-null  int64\n 5   Tenure          10000 non-null  int64\n 6   NumOfProducts   10000 non-null  int64\n 7   HasCrCard       10000 non-null  int64\n 8   IsActiveMember  10000 non-null  int64\n 9   Exited          10000 non-null  int64\ndtypes: int64(10)\nmemory usage: 781.4 KB\n*******\n","output_type":"stream"},{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"   Surname  CreditScore  Geography  Gender  Age  Tenure  NumOfProducts  \\\n0     1115          619          0       0   42       2              1   \n1     1177          608          2       0   41       1              1   \n2     2040          502          0       0   42       8              3   \n3      289          699          0       0   39       1              2   \n4     1822          850          2       0   43       2              1   \n\n   HasCrCard  IsActiveMember  Exited  \n0          1               1       1  \n1          0               1       0  \n2          1               0       1  \n3          0               0       0  \n4          1               1       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Surname</th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1115</td>\n      <td>619</td>\n      <td>0</td>\n      <td>0</td>\n      <td>42</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1177</td>\n      <td>608</td>\n      <td>2</td>\n      <td>0</td>\n      <td>41</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2040</td>\n      <td>502</td>\n      <td>0</td>\n      <td>0</td>\n      <td>42</td>\n      <td>8</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>289</td>\n      <td>699</td>\n      <td>0</td>\n      <td>0</td>\n      <td>39</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1822</td>\n      <td>850</td>\n      <td>2</td>\n      <td>0</td>\n      <td>43</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n \nclassifier = {\n    \"Logistic Regression\": LogisticRegression(),\n    \"Decision Tree Classifier\": DecisionTreeClassifier(),\n    \"Random Forest Classifier\": RandomForestClassifier(),\n    \"Support Vector Classifier\": SVC(),\n    \"K-Nearest Neighbors Classifier\": KNeighborsClassifier(),\n    \"Gaussian Naive Bayes\": GaussianNB(),\n    \"AdaBoost Classifier\": AdaBoostClassifier(),\n    \"Gradient Boosting Classifier\": GradientBoostingClassifier(),\n    \"Bagging Classifier\": BaggingClassifier(),\n    \"Extra Trees Classifier\": ExtraTreesClassifier(),\n    \"Stochastic Gradient Descent Classifier\": SGDClassifier(),\n#     \"Voting Classifier\": VotingClassifier(estimators=[\n#         ('lr', LogisticRegression()),\n#         ('dt', DecisionTreeClassifier()),\n#         ('rf', RandomForestClassifier()),\n#         ('svc', SVC()),\n#         ('knn', KNeighborsClassifier())\n#     ], voting='hard')\n}\n\nfor name, clf in classifier.items():\n    print(f\"\\n=========={name}===========\")\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    \n    # Evaluation Metrics\n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred)\n    recall = recall_score(y_test, y_pred)\n    f1 = f1_score(y_test, y_pred)\n    print(f\"\\n Accuracy: {accuracy}\")\n    print(f\" Precision: {precision}\")\n    print(f\" Recall: {recall}\")\n    print(f\" F1 Score: {f1}\")\n    \n    # Confusion Matrix\n    print(\"\\n Confusion Matrix:\")\n    print(confusion_matrix(y_test, y_pred))\n    \n    # Classification Report\n    print(\"\\n Classification Report:\")\n    print(classification_report(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:52.771818Z","iopub.execute_input":"2024-06-01T14:11:52.772337Z","iopub.status.idle":"2024-06-01T14:11:59.666472Z","shell.execute_reply.started":"2024-06-01T14:11:52.772303Z","shell.execute_reply":"2024-06-01T14:11:59.664778Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"\n==========Logistic Regression===========\n\n Accuracy: 0.8195\n Precision: 0.6538461538461539\n Recall: 0.17302798982188294\n F1 Score: 0.2736418511066398\n\n Confusion Matrix:\n[[1571   36]\n [ 325   68]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.83      0.98      0.90      1607\n           1       0.65      0.17      0.27       393\n\n    accuracy                           0.82      2000\n   macro avg       0.74      0.58      0.59      2000\nweighted avg       0.79      0.82      0.77      2000\n\n\n==========Decision Tree Classifier===========\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"\n Accuracy: 0.787\n Precision: 0.4611764705882353\n Recall: 0.49872773536895676\n F1 Score: 0.4792176039119805\n\n Confusion Matrix:\n[[1378  229]\n [ 197  196]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.87      0.86      0.87      1607\n           1       0.46      0.50      0.48       393\n\n    accuracy                           0.79      2000\n   macro avg       0.67      0.68      0.67      2000\nweighted avg       0.79      0.79      0.79      2000\n\n\n==========Random Forest Classifier===========\n\n Accuracy: 0.86\n Precision: 0.728744939271255\n Recall: 0.4580152671755725\n F1 Score: 0.5625\n\n Confusion Matrix:\n[[1540   67]\n [ 213  180]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.88      0.96      0.92      1607\n           1       0.73      0.46      0.56       393\n\n    accuracy                           0.86      2000\n   macro avg       0.80      0.71      0.74      2000\nweighted avg       0.85      0.86      0.85      2000\n\n\n==========Support Vector Classifier===========\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"\n Accuracy: 0.8035\n Precision: 0.0\n Recall: 0.0\n F1 Score: 0.0\n\n Confusion Matrix:\n[[1607    0]\n [ 393    0]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.80      1.00      0.89      1607\n           1       0.00      0.00      0.00       393\n\n    accuracy                           0.80      2000\n   macro avg       0.40      0.50      0.45      2000\nweighted avg       0.65      0.80      0.72      2000\n\n\n==========K-Nearest Neighbors Classifier===========\n\n Accuracy: 0.768\n Precision: 0.2679738562091503\n Recall: 0.10432569974554708\n F1 Score: 0.15018315018315018\n\n Confusion Matrix:\n[[1495  112]\n [ 352   41]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.81      0.93      0.87      1607\n           1       0.27      0.10      0.15       393\n\n    accuracy                           0.77      2000\n   macro avg       0.54      0.52      0.51      2000\nweighted avg       0.70      0.77      0.73      2000\n\n\n==========Gaussian Naive Bayes===========\n\n Accuracy: 0.83\n Precision: 0.7264957264957265\n Recall: 0.21628498727735368\n F1 Score: 0.3333333333333333\n\n Confusion Matrix:\n[[1575   32]\n [ 308   85]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.84      0.98      0.90      1607\n           1       0.73      0.22      0.33       393\n\n    accuracy                           0.83      2000\n   macro avg       0.78      0.60      0.62      2000\nweighted avg       0.81      0.83      0.79      2000\n\n\n==========AdaBoost Classifier===========\n\n Accuracy: 0.8545\n Precision: 0.6961538461538461\n Recall: 0.46055979643765904\n F1 Score: 0.554364471669219\n\n Confusion Matrix:\n[[1528   79]\n [ 212  181]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.88      0.95      0.91      1607\n           1       0.70      0.46      0.55       393\n\n    accuracy                           0.85      2000\n   macro avg       0.79      0.71      0.73      2000\nweighted avg       0.84      0.85      0.84      2000\n\n\n==========Gradient Boosting Classifier===========\n\n Accuracy: 0.8595\n Precision: 0.7295081967213115\n Recall: 0.4529262086513995\n F1 Score: 0.5588697017268446\n\n Confusion Matrix:\n[[1541   66]\n [ 215  178]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.88      0.96      0.92      1607\n           1       0.73      0.45      0.56       393\n\n    accuracy                           0.86      2000\n   macro avg       0.80      0.71      0.74      2000\nweighted avg       0.85      0.86      0.85      2000\n\n\n==========Bagging Classifier===========\n\n Accuracy: 0.8425\n Precision: 0.6547619047619048\n Recall: 0.4198473282442748\n F1 Score: 0.5116279069767442\n\n Confusion Matrix:\n[[1520   87]\n [ 228  165]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.87      0.95      0.91      1607\n           1       0.65      0.42      0.51       393\n\n    accuracy                           0.84      2000\n   macro avg       0.76      0.68      0.71      2000\nweighted avg       0.83      0.84      0.83      2000\n\n\n==========Extra Trees Classifier===========\n\n Accuracy: 0.8445\n Precision: 0.6553030303030303\n Recall: 0.4402035623409669\n F1 Score: 0.5266362252663622\n\n Confusion Matrix:\n[[1516   91]\n [ 220  173]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.87      0.94      0.91      1607\n           1       0.66      0.44      0.53       393\n\n    accuracy                           0.84      2000\n   macro avg       0.76      0.69      0.72      2000\nweighted avg       0.83      0.84      0.83      2000\n\n\n==========Stochastic Gradient Descent Classifier===========\n\n Accuracy: 0.7985\n Precision: 0.3611111111111111\n Recall: 0.03307888040712468\n F1 Score: 0.0606060606060606\n\n Confusion Matrix:\n[[1584   23]\n [ 380   13]]\n\n Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.81      0.99      0.89      1607\n           1       0.36      0.03      0.06       393\n\n    accuracy                           0.80      2000\n   macro avg       0.58      0.51      0.47      2000\nweighted avg       0.72      0.80      0.72      2000\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# Random Forset classifier is selected\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:59.669322Z","iopub.execute_input":"2024-06-01T14:11:59.670685Z","iopub.status.idle":"2024-06-01T14:11:59.677281Z","shell.execute_reply.started":"2024-06-01T14:11:59.670611Z","shell.execute_reply":"2024-06-01T14:11:59.675532Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"import joblib\n\n# Assuming 'clf' is your trained BernoulliNB Naive Bayes classifier\nrandom_forset_classifier = classifier[\"Random Forest Classifier\"]\n\n# Save the model to a file\njoblib.dump(random_forset_classifier, \"random_forest_classifier.pkl\")","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:59.679784Z","iopub.execute_input":"2024-06-01T14:11:59.680597Z","iopub.status.idle":"2024-06-01T14:11:59.846849Z","shell.execute_reply.started":"2024-06-01T14:11:59.680540Z","shell.execute_reply":"2024-06-01T14:11:59.845364Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"['random_forest_classifier.pkl']"},"metadata":{}}]},{"cell_type":"code","source":"import os\n\n# List all files in the current directory\nfiles = os.listdir('.')\nprint(\"Files in the current directory:\", files)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T14:11:59.849133Z","iopub.execute_input":"2024-06-01T14:11:59.849668Z","iopub.status.idle":"2024-06-01T14:11:59.856869Z","shell.execute_reply.started":"2024-06-01T14:11:59.849620Z","shell.execute_reply":"2024-06-01T14:11:59.855479Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"Files in the current directory: ['.virtual_documents', 'random_forest_classifier.pkl']\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}